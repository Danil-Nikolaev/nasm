     1                                      section .data
     2 00000000 456E74657220737472-     EnterMsg db "Enter string:",10
     2 00000009 696E673A0A         
     3                                  lenM equ $-EnterMsg
     4                                  
     5 0000000E 20<rep 10h>             RezBuf times 16 db " "
     6 0000001E 0000                    count dw 0
     7                                  
     8 00000020 20<rep 8h>              save times 8 db " "
     9                                      section .bss
    10 00000000 ????????????????        result_array resw 4
    11                                  
    12 00000008 <res 23h>               InBuf resb 35
    13                                  lenIn equ $-InBuf
    14                                  
    15 0000002B <res 14h>               OutBuf resw 10
    16                                  lenOut equ $-OutBuf
    17                                  
    18                                      section .text
    19                                      global _start
    20                                      _start:
    21                                  ; Р’С‹РІРµРґРµРј СЃРѕРѕР±С‰РµРЅРёРµ РЅР° РїСЂРѕСЃСЊР±Сѓ РІС‹РІРµСЃС‚Рё СЃС‚СЂРѕРєСѓ
    22 00000000 B804000000              mov eax, 4
    23 00000005 BB01000000              mov ebx, 1
    24 0000000A B9[00000000]            mov ecx, EnterMsg
    25 0000000F BA0E000000              mov edx, lenM
    26 00000014 CD80                    int 80h
    27                                  ; Р’РІРѕРґРёРј СЃС‚СЂРѕРєСѓ
    28 00000016 B803000000              mov eax, 3
    29 0000001B BB00000000              mov ebx, 0
    30 00000020 B9[08000000]            mov ecx, InBuf
    31 00000025 BA23000000              mov edx, lenIn
    32 0000002A CD80                    int 80h
    33                                  ; Р·Р°РїРѕР»РЅРёРј 
    34                                  
    35                                  ; РІ edi РєР»Р°РґРµРј РІРІРµРґРµРЅРЅСѓСЋ СЃС‚СЂРѕРєСѓ
    36 0000002C 8D35[08000000]          lea esi, [InBuf]
    37 00000032 B020                    mov al, " " ; РІ al РєР»Р°РґС‘Рј РїСЂРѕР±РµР»
    38 00000034 BB00000000              mov ebx, 0 ; ebx СЃС‡С‘С‚С‡РёРє СѓРЅРёРєР°Р»СЊРЅС‹С… СЃРёРјРІРѕР»РѕРІ РІ СЃР»РѕРІРµ
    39 00000039 B923000000              mov ecx, 35 ; РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРІС‚РѕСЂРµРЅРёР№ (4 СЃР»РѕРІР° * 8 СЃРёРјРІРѕР»РѕРІ + 3 РїСЂРѕР±РµР»Р° РјРµР¶РґСѓ СЃР»РѕРІР°РјРё)
    40 0000003E BA00000000              mov edx, 0
    41 00000043 FC                      cld ; РѕР±РЅСѓР»СЏРµРј С„Р»Р°Рі df
    42                                  
    43                                  loop_one:
    44 00000044 AC                          lodsb
    45 00000045 83F820                      cmp EAX, " "
    46 00000048 741C                        je space
    47 0000004A 8D3D[20000000]                  lea edi, [save]
    48 00000050 51                              push ecx
    49 00000051 B908000000                      mov ecx, 8
    50 00000056 F2AE                            repne scasb
    51 00000058 59                              pop ecx
    52 00000059 742D                            je find
    53 0000005B 8883[20000000]                  mov [ebx + save], al
    54 00000061 43                              inc ebx
    55 00000062 E2E0                            loop loop_one
    56 00000064 EB24                            jmp continue
    57                                      space:
    58 00000066 8D3D[20000000]                  lea edi, [save]
    59 0000006C B020                            mov al, " "
    60 0000006E 51                              push ecx
    61 0000006F B908000000                      mov ecx, 8
    62 00000074 F3AA                            rep stosb
    63 00000076 59                              pop ecx
    64 00000077 899C12[00000000]                mov [2*edx + result_array], ebx
    65 0000007E BB00000000                      mov ebx, 0
    66 00000083 42                              inc edx
    67 00000084 E2BE                            loop loop_one
    68 00000086 EB02                            jmp continue
    69                                      find:
    70 00000088 E2BA                                loop loop_one
    71                                  ; Р’С‹РІРѕРґ СЂРµР·СѓР»СЊС‚Р°С‚РѕРІ
    72                                  continue:
    73 0000008A 899C12[00000000]            mov [2*edx + result_array], ebx
    74 00000091 B904000000                  mov ECX, 4
    75 00000096 BB00000000                  mov EBX, 0
    76                                  cycle4:
    77 0000009B 51                          push ECX
    78 0000009C BE[2B000000]                mov esi, OutBuf
    79 000000A1 668B841B[00000000]          mov ax, [EBX * 2 + result_array]
    80 000000A9 43                          inc EBX
    81 000000AA 98                          cwde
    82 000000AB E8(55000000)                call IntToStr
    83 000000B0 89C2                        mov edx, eax
    84 000000B2 B804000000                  mov eax, 4
    85 000000B7 53                          push EBX
    86 000000B8 BB01000000                  mov ebx, 1
    87 000000BD 89F1                        mov ecx, esi
    88 000000BF CD80                        int 80h
    89 000000C1 5B                          pop EBX
    90 000000C2 59                          pop ECX
    91 000000C3 E2D6                        loop cycle4
    92                                  
    93                                  ; РљРѕРЅРµС† РїСЂРѕРіСЂР°РјРјС‹
    94 000000C5 B801000000              mov eax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (exit)
    95 000000CA 31DB                    xor ebx, ebx; РєРѕРґ РІРѕР·РІСЂР°С‚Р° 0
    96 000000CC CD80                    int 80h
    97                                  %include "../lib.asm"
    98                              <1>     section _text
    99                              <1> StrToInt:
   100 00000000 57                  <1>          push   edi
   101 00000001 B739                <1>          mov    bh, '9'
   102 00000003 B330                <1>          mov    bl, '0'
   103 00000005 56                  <1>          push   esi     ; сохраняем адрес исходной строки
   104 00000006 803E2D              <1>          cmp    byte[esi], '-'
   105 00000009 7501                <1>          jne   .prod
   106 0000000B 46                  <1>          inc    esi     ; пропускаем знак
   107 0000000C FC                  <1> .prod    cld
   108 0000000D 6631FF              <1>          xor    di, di  ; обнуляем будущее число
   109 00000010 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
   110 00000011 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
   111 00000013 741F                <1>          je     .Return
   112 00000015 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
   113 00000017 722F                <1>          jb     .Error  ; "ниже" – Ошибка
   114 00000019 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
   115 0000001B 772B                <1>          ja     .Error  ; "выше" – Ошибка
   116 0000001D 2C30                <1>          sub    al, 30h ; получаем цифру из символа
   117 0000001F 6698                <1>          cbw            ; расширяем до слова
   118 00000021 6650                <1>          push   ax      ; сохраняем в стеке
   119 00000023 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
   120 00000027 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
   121 0000002A 665F                <1>          pop    di      ; в DI – очередная цифра
   122 0000002C 6601F8              <1>          add    ax, di
   123 0000002F 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
   124 00000032 EBDC                <1>          jmp    .cycle
   125 00000034 5E                  <1> .Return: pop    esi
   126 00000035 BB00000000          <1>          mov    ebx, 0
   127 0000003A 803E2D              <1>          cmp    byte[esi], '-'
   128 0000003D 7503                <1>          jne    .J
   129 0000003F 66F7DF              <1>          neg    di
   130 00000042 6689F8              <1> .J       mov    ax, di
   131 00000045 98                  <1>          cwde
   132 00000046 EB0B                <1>          jmp    .R
   133 00000048 5E                  <1> .Error:  pop    esi
   134 00000049 B800000000          <1>          mov    eax, 0
   135 0000004E BB01000000          <1>          mov    ebx, 1
   136 00000053 5F                  <1> .R       pop    edi
   137 00000054 C3                  <1>          ret
   138                              <1> IntToStr: 
   139 00000055 57                  <1>          push   edi
   140 00000056 53                  <1>          push   ebx
   141 00000057 52                  <1>          push   edx
   142 00000058 51                  <1>          push   ecx
   143 00000059 56                  <1> 		 push   esi
   144 0000005A C60600              <1> 		 mov    byte[esi],0 ; на место знака
   145 0000005D 83F800              <1>          cmp    eax,0
   146 00000060 7D05                <1>          jge    .l1
   147 00000062 F7D8                <1>          neg    eax
   148 00000064 C6062D              <1>          mov    byte[esi],'-'
   149 00000067 C646060A            <1> .l1      mov    byte[esi+6],10
   150 0000006B BF05000000          <1>          mov    edi,5
   151 00000070 66BB0A00            <1>          mov    bx,10
   152 00000074 6699                <1> .again:  cwd           ; расширили слово до двойного
   153 00000076 66F7F3              <1>          div    bx     ; делим результат на 10
   154 00000079 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
   155 0000007C 88143E              <1>          mov    [esi+edi],dl ; пишем символ в строку
   156 0000007F 4F                  <1>          dec    edi    ; переводим указатель на  
   157                              <1>                        ; предыдущую позицию
   158 00000080 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
   159 00000084 75EE                <1>          jne    .again
   160 00000086 B906000000          <1>          mov    ecx, 6
   161 0000008B 29F9                <1>          sub    ecx, edi ; длина результата+знак
   162 0000008D 89C8                <1> 		 mov    eax,ecx
   163 0000008F 40                  <1> 		 inc    eax      ; длина результата+0А
   164 00000090 46                  <1>          inc    esi      ; пропускаем знак
   165 00000091 56                  <1> 		 push   esi
   166 00000092 8D343E              <1>          lea    esi,[esi+edi] ; начало результата
   167 00000095 5F                  <1> 		 pop    edi
   168 00000096 F3A4                <1>          rep movsb
   169 00000098 5E                  <1>          pop    esi  
   170 00000099 59                  <1>          pop    ecx
   171 0000009A 5A                  <1>          pop    edx
   172 0000009B 5B                  <1>          pop    ebx
   173 0000009C 5F                  <1>          pop    edi
   174 0000009D C3                  <1>          ret
