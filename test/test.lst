     1                                  section .data
     2 00000000 0600                      rows dw 6
     3 00000002 0600                      cols dw 6
     4 00000004 010002000300040005-       matr dw 1, 2, 3, 4, 5, 6
     4 0000000D 000600             
     5 00000010 0700080009000A000B-            dw 7, 8, 9, 10, 11, 12
     5 00000019 000C00             
     6 0000001C 0D000E000F00100011-            dw 13, 14, 15, 16, 17, 18
     6 00000025 001200             
     7 00000028 130014001500160017-            dw 19, 20, 21, 22, 23, 24
     7 00000031 001800             
     8 00000034 19001A001B001C001D-            dw 25, 26, 27, 28, 29, 30
     8 0000003D 001E00             
     9 00000040 1F0020002100220023-            dw 31, 32, 33, 34, 35, 36
     9 00000049 002400             
    10 0000004C 0A                        new_line db 10
    11                                  
    12                                  section .bss
    13 00000000 <res 14h>                 out_buf resw 10
    14                                    len_out equ $-out_buf
    15                                  
    16                                  global _start
    17                                  
    18                                  section .text
    19                                    _start:
    20                                      ; вывод матрицы
    21 00000000 B906000000                  mov ecx, 6
    22 00000005 BB00000000                  mov ebx, 0
    23                                      LOOP3:
    24 0000000A 51                            push ecx
    25 0000000B B906000000                    mov ecx, 6
    26                                        LOOP4:
    27 00000010 51                              push ecx
    28 00000011 BE[00000000]                    mov esi, out_buf
    29 00000016 668B841B[04000000]              mov ax, [ebx * 2 + matr]
    30 0000001E 43                              inc ebx
    31 0000001F 98                              cwde
    32 00000020 E8(55000000)                    call IntToStr
    33 00000025 89C2                            mov edx, eax
    34 00000027 B804000000                      mov eax, 4
    35 0000002C 53                              push ebx
    36 0000002D BB01000000                      mov ebx, 1
    37 00000032 89F1                            mov ecx, esi
    38 00000034 CD80                            int 80h
    39 00000036 5B                              pop ebx
    40 00000037 59                              pop ecx
    41 00000038 E2D6                            loop LOOP4
    42 0000003A 53                            push ebx
    43 0000003B B804000000                    mov eax, 4
    44 00000040 BB01000000                    mov ebx, 1
    45 00000045 B9[4C000000]                  mov ecx, new_line
    46 0000004A BA01000000                    mov edx, 1
    47 0000004F CD80                          int 80h
    48 00000051 5B                            pop ebx
    49 00000052 59                            pop ecx
    50 00000053 E2B5                          loop LOOP3
    51                                      
    52                                      ; выход
    53 00000055 B801000000                  mov eax, 1
    54 0000005A 31DB                        xor ebx, ebx
    55 0000005C CD80                        int 80h
    56                                  
    57                                  %include "../lib.asm"
    58                              <1>     section _text
    59                              <1> StrToInt:
    60 00000000 57                  <1>          push   edi
    61 00000001 B739                <1>          mov    bh, '9'
    62 00000003 B330                <1>          mov    bl, '0'
    63 00000005 56                  <1>          push   esi     ; ��������� ����� �������� ������
    64 00000006 803E2D              <1>          cmp    byte[esi], '-'
    65 00000009 7501                <1>          jne   .prod
    66 0000000B 46                  <1>          inc    esi     ; ���������� ����
    67 0000000C FC                  <1> .prod    cld
    68 0000000D 6631FF              <1>          xor    di, di  ; �������� ������� �����
    69 00000010 AC                  <1> .cycle:  lodsb          ; ��������� ������ (�����)
    70 00000011 3C0A                <1>          cmp    al, 10  ; ���� 10, �� �� �����
    71 00000013 741F                <1>          je     .Return
    72 00000015 38D8                <1>          cmp    al, bl  ; ���������� � ����� ����
    73 00000017 722F                <1>          jb     .Error  ; "����" � ������
    74 00000019 38F8                <1>          cmp    al, bh  ; ���������� � ����� ������ 
    75 0000001B 772B                <1>          ja     .Error  ; "����" � ������
    76 0000001D 2C30                <1>          sub    al, 30h ; �������� ����� �� �������
    77 0000001F 6698                <1>          cbw            ; ��������� �� �����
    78 00000021 6650                <1>          push   ax      ; ��������� � �����
    79 00000023 66B80A00            <1>          mov    ax, 10  ; ������� 10 � AX
    80 00000027 66F7E7              <1>          mul    di      ; ��������, ��������� � DX:AX
    81 0000002A 665F                <1>          pop    di      ; � DI � ��������� �����
    82 0000002C 6601F8              <1>          add    ax, di
    83 0000002F 6689C7              <1>          mov    di, ax  ; � DI � ����������� �����        
    84 00000032 EBDC                <1>          jmp    .cycle
    85 00000034 5E                  <1> .Return: pop    esi
    86 00000035 BB00000000          <1>          mov    ebx, 0
    87 0000003A 803E2D              <1>          cmp    byte[esi], '-'
    88 0000003D 7503                <1>          jne    .J
    89 0000003F 66F7DF              <1>          neg    di
    90 00000042 6689F8              <1> .J       mov    ax, di
    91 00000045 98                  <1>          cwde
    92 00000046 EB0B                <1>          jmp    .R
    93 00000048 5E                  <1> .Error:  pop    esi
    94 00000049 B800000000          <1>          mov    eax, 0
    95 0000004E BB01000000          <1>          mov    ebx, 1
    96 00000053 5F                  <1> .R       pop    edi
    97 00000054 C3                  <1>          ret
    98                              <1> IntToStr: 
    99 00000055 57                  <1>          push   edi
   100 00000056 53                  <1>          push   ebx
   101 00000057 52                  <1>          push   edx
   102 00000058 51                  <1>          push   ecx
   103 00000059 56                  <1> 		 push   esi
   104 0000005A C60600              <1> 		 mov    byte[esi],0 ; �� ����� �����
   105 0000005D 83F800              <1>          cmp    eax,0
   106 00000060 7D05                <1>          jge    .l1
   107 00000062 F7D8                <1>          neg    eax
   108 00000064 C6062D              <1>          mov    byte[esi],'-'
   109 00000067 C646060A            <1> .l1      mov    byte[esi+6],10
   110 0000006B BF05000000          <1>          mov    edi,5
   111 00000070 66BB0A00            <1>          mov    bx,10
   112 00000074 6699                <1> .again:  cwd           ; ��������� ����� �� ��������
   113 00000076 66F7F3              <1>          div    bx     ; ����� ��������� �� 10
   114 00000079 80C230              <1>          add    dl,30h ; �������� �� ������� ��� �����
   115 0000007C 88143E              <1>          mov    [esi+edi],dl ; ����� ������ � ������
   116 0000007F 4F                  <1>          dec    edi    ; ��������� ��������� ��  
   117                              <1>                        ; ���������� �������
   118 00000080 6683F800            <1>          cmp    ax, 0  ; ������������� ��� �����?
   119 00000084 75EE                <1>          jne    .again
   120 00000086 B906000000          <1>          mov    ecx, 6
   121 0000008B 29F9                <1>          sub    ecx, edi ; ����� ����������+����
   122 0000008D 89C8                <1> 		 mov    eax,ecx
   123 0000008F 40                  <1> 		 inc    eax      ; ����� ����������+0�
   124 00000090 46                  <1>          inc    esi      ; ���������� ����
   125 00000091 56                  <1> 		 push   esi
   126 00000092 8D343E              <1>          lea    esi,[esi+edi] ; ������ ����������
   127 00000095 5F                  <1> 		 pop    edi
   128 00000096 F3A4                <1>          rep movsb
   129 00000098 5E                  <1>          pop    esi  
   130 00000099 59                  <1>          pop    ecx
   131 0000009A 5A                  <1>          pop    edx
   132 0000009B 5B                  <1>          pop    ebx
   133 0000009C 5F                  <1>          pop    edi
   134 0000009D C3                  <1>          ret
