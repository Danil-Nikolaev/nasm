     1                                      section .data
     2 00000000 496E70757420332076-     OpenMSG dw "Input 3 variable", 10
     2 00000009 61726961626C650A00 
     3                                  lenOpen equ $-OpenMSG
     4                                      section .bss
     5                                  ;Р РµР·РµСЂРІРёСЂСѓРµРј РјРµСЃС‚Рѕ РґР»СЏ РїРµСЂРµРјРµРЅРЅС‹С…
     6 00000000 ????                    A resw 1
     7 00000002 ????                    B resw 1
     8 00000004 ????                    K resw 1
     9                                  ; Р РµР·РµСЂРІРёСЂСѓРµРј РјРµСЃС‚Рѕ РґР»СЏ СЂРµР·СѓР»СЊС‚Р°С‚Р°
    10 00000006 ????                    S resw 1
    11                                  
    12 00000008 <res 14h>               InBuf   resw    10
    13                                  lenIn   equ     $-InBuf
    14                                  
    15 0000001C <res 14h>               OutBuf resw 10
    16                                  lenOut equ $-OutBuf
    17                                  
    18                                      section .text
    19                                  global _start
    20                                  _start:
    21                                      ; Р’С‹РІРµРґРµРј СЃРѕРѕР±С‰РµРЅРёРµ СЃ РїСЂРѕСЃСЊР±РѕР№ РІРІРµСЃС‚Рё 3 РїРµСЂРµРјРµРЅРЅС‹С…
    22 00000000 B804000000                  mov     eax, 4
    23 00000005 BB01000000                  mov     ebx, 1
    24 0000000A B9[00000000]                mov     ecx, OpenMSG
    25 0000000F BA12000000                  mov     edx, lenOpen
    26 00000014 CD80                        int     80h
    27                                      ; РџСЂРѕСЃРёРј РІРІРµСЃС‚Рё РїРµСЂРµРјРµРЅРЅС‹Рµ
    28 00000016 B803000000                  mov     eax, 3
    29 0000001B BB00000000                  mov     ebx, 0
    30 00000020 B9[08000000]                mov     ecx, InBuf
    31 00000025 BA14000000                  mov     edx, lenIn
    32 0000002A CD80                        int     80h
    33                                      ;РџСЂРµРѕР±СЂР°Р·СѓРµРј СЃС‚СЂРѕРєСѓ РІ С‡РёСЃР»Рѕ
    34 0000002C BE[08000000]                mov esi, InBuf
    35 00000031 E8(00000000)                call StrToInt
    36 00000036 A3[00000000]                mov [A], EAX
    37                                  
    38 0000003B B803000000                  mov     eax, 3
    39 00000040 BB00000000                  mov     ebx, 0
    40 00000045 B9[08000000]                mov     ecx, InBuf
    41 0000004A BA14000000                  mov     edx, lenIn
    42 0000004F CD80                        int     80h
    43                                  
    44 00000051 BE[08000000]                mov esi, InBuf
    45 00000056 E8(00000000)                call StrToInt
    46                                  
    47 0000005B A3[02000000]                mov [B], EAX
    48                                  
    49 00000060 B803000000                  mov     eax, 3
    50 00000065 BB00000000                  mov     ebx, 0
    51 0000006A B9[08000000]                mov     ecx, InBuf
    52 0000006F BA14000000                  mov     edx, lenIn
    53 00000074 CD80                        int     80h
    54                                  
    55 00000076 BE[08000000]                mov esi, InBuf
    56 0000007B E8(00000000)                call StrToInt
    57                                  
    58 00000080 A3[04000000]                mov [K], EAX
    59                                  
    60                                      ; Р’С‹С‡РёСЃР»РµРЅРёРµ РІС‹СЂР°Р¶РµРЅРёСЏ
    61 00000085 A1[00000000]                mov EAX,[A]
    62 0000008A 8B1D[02000000]              mov EBX,[B]
    63 00000090 B902000000                  mov ECX,2
    64 00000095 F7EB                        imul EBX ; EBX:EAX := A * B
    65                                      ; xor   edx, edx ;
    66 00000097 98                          cwde
    67 00000098 99                          cdq
    68 00000099 F7F9                        idiv ECX ; EAX = (EBX:EAX)/ 2
    69 0000009B 8B1D[04000000]              mov EBX, [K]
    70 000000A1 29D8                        sub EAX, EBX
    71 000000A3 89C3                        mov EBX, EAX
    72 000000A5 BA00000000                  mov edx, 0
    73 000000AA A1[00000000]                mov EAX, [A]
    74 000000AF B903000000                  mov ECX, 3
    75 000000B4 98                          cwde
    76 000000B5 99                          cdq
    77 000000B6 F7F9                        idiv ECX ; EAX = A/3
    78 000000B8 2B05[02000000]              sub EAX, [B] ; EAX = EAX - B
    79 000000BE 01C3                        add EBX, EAX
    80 000000C0 891D[06000000]              mov [S], EBX
    81                                  
    82                                      ;Р’С‹РІРµРґРµРј РЅР° СЌРєСЂР°РЅ СЂРµР·СѓР»СЊС‚Р°С‚
    83 000000C6 BE[1C000000]                mov esi, OutBuf
    84 000000CB 66A1[06000000]              mov ax, [S]
    85 000000D1 98                          cwde
    86 000000D2 E8(55000000)                call IntToStr
    87 000000D7 89C2                        mov edx, eax
    88 000000D9 B804000000                  mov     eax, 4
    89 000000DE BB01000000                  mov     ebx, 1
    90 000000E3 89F1                        mov     ecx, esi
    91 000000E5 CD80                        int     80h
    92                                  
    93 000000E7 B801000000                  mov eax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (exit)
    94 000000EC 31DB                        xor ebx, ebx; РєРѕРґ РІРѕР·РІСЂР°С‚Р° 0
    95 000000EE CD80                        int 80h
    96                                  %include "../lib.asm"
    97                              <1>     section _text
    98                              <1> StrToInt:
    99 00000000 57                  <1>          push   edi
   100 00000001 B739                <1>          mov    bh, '9'
   101 00000003 B330                <1>          mov    bl, '0'
   102 00000005 56                  <1>          push   esi     ; сохраняем адрес исходной строки
   103 00000006 803E2D              <1>          cmp    byte[esi], '-'
   104 00000009 7501                <1>          jne   .prod
   105 0000000B 46                  <1>          inc    esi     ; пропускаем знак
   106 0000000C FC                  <1> .prod    cld
   107 0000000D 6631FF              <1>          xor    di, di  ; обнуляем будущее число
   108 00000010 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
   109 00000011 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
   110 00000013 741F                <1>          je     .Return
   111 00000015 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
   112 00000017 722F                <1>          jb     .Error  ; "ниже" – Ошибка
   113 00000019 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
   114 0000001B 772B                <1>          ja     .Error  ; "выше" – Ошибка
   115 0000001D 2C30                <1>          sub    al, 30h ; получаем цифру из символа
   116 0000001F 6698                <1>          cbw            ; расширяем до слова
   117 00000021 6650                <1>          push   ax      ; сохраняем в стеке
   118 00000023 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
   119 00000027 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
   120 0000002A 665F                <1>          pop    di      ; в DI – очередная цифра
   121 0000002C 6601F8              <1>          add    ax, di
   122 0000002F 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
   123 00000032 EBDC                <1>          jmp    .cycle
   124 00000034 5E                  <1> .Return: pop    esi
   125 00000035 BB00000000          <1>          mov    ebx, 0
   126 0000003A 803E2D              <1>          cmp    byte[esi], '-'
   127 0000003D 7503                <1>          jne    .J
   128 0000003F 66F7DF              <1>          neg    di
   129 00000042 6689F8              <1> .J       mov    ax, di
   130 00000045 98                  <1>          cwde
   131 00000046 EB0B                <1>          jmp    .R
   132 00000048 5E                  <1> .Error:  pop    esi
   133 00000049 B800000000          <1>          mov    eax, 0
   134 0000004E BB01000000          <1>          mov    ebx, 1
   135 00000053 5F                  <1> .R       pop    edi
   136 00000054 C3                  <1>          ret
   137                              <1> IntToStr: 
   138 00000055 57                  <1>          push   edi
   139 00000056 53                  <1>          push   ebx
   140 00000057 52                  <1>          push   edx
   141 00000058 51                  <1>          push   ecx
   142 00000059 56                  <1> 		 push   esi
   143 0000005A C60600              <1> 		 mov    byte[esi],0 ; на место знака
   144 0000005D 83F800              <1>          cmp    eax,0
   145 00000060 7D05                <1>          jge    .l1
   146 00000062 F7D8                <1>          neg    eax
   147 00000064 C6062D              <1>          mov    byte[esi],'-'
   148 00000067 C646060A            <1> .l1      mov    byte[esi+6],10
   149 0000006B BF05000000          <1>          mov    edi,5
   150 00000070 66BB0A00            <1>          mov    bx,10
   151 00000074 6699                <1> .again:  cwd           ; расширили слово до двойного
   152 00000076 66F7F3              <1>          div    bx     ; делим результат на 10
   153 00000079 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
   154 0000007C 88143E              <1>          mov    [esi+edi],dl ; пишем символ в строку
   155 0000007F 4F                  <1>          dec    edi    ; переводим указатель на  
   156                              <1>                        ; предыдущую позицию
   157 00000080 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
   158 00000084 75EE                <1>          jne    .again
   159 00000086 B906000000          <1>          mov    ecx, 6
   160 0000008B 29F9                <1>          sub    ecx, edi ; длина результата+знак
   161 0000008D 89C8                <1> 		 mov    eax,ecx
   162 0000008F 40                  <1> 		 inc    eax      ; длина результата+0А
   163 00000090 46                  <1>          inc    esi      ; пропускаем знак
   164 00000091 56                  <1> 		 push   esi
   165 00000092 8D343E              <1>          lea    esi,[esi+edi] ; начало результата
   166 00000095 5F                  <1> 		 pop    edi
   167 00000096 F3A4                <1>          rep movsb
   168 00000098 5E                  <1>          pop    esi  
   169 00000099 59                  <1>          pop    ecx
   170 0000009A 5A                  <1>          pop    edx
   171 0000009B 5B                  <1>          pop    ebx
   172 0000009C 5F                  <1>          pop    edi
   173 0000009D C3                  <1>          ret
