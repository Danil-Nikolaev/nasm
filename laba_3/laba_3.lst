     1                                  section .data
     2 00000000 506C6561736520696E-         OpenMSG dw "Please input 3 variable", 10
     2 00000009 707574203320766172-
     2 00000012 6961626C65000A00   
     3                                      lenOpen equ $-OpenMSG
     4                                  section .bss
     5 00000000 ????                        A resw 1
     6 00000002 ????                        B resw 1
     7 00000004 ????                        X resw 1
     8 00000006 ????                        f resw 1
     9 00000008 <res 14h>                   InBuf   resw    10
    10                                      lenIn   equ     $-InBuf
    11 0000001C <res 14h>                   OutBuf resw 10
    12                                      lenOut equ $-OutBuf
    13                                  section .text
    14                                      global _start
    15                                      _start:
    16 00000000 B804000000                      mov     eax, 4
    17 00000005 BB01000000                      mov     ebx, 1
    18 0000000A B9[00000000]                    mov     ecx, OpenMSG
    19 0000000F BA1A000000                      mov     edx, lenOpen
    20 00000014 CD80                            int     80h
    21                                  
    22                                          ; РџСЂРѕСЃРёРј РІРІРµСЃС‚Рё РїРµСЂРµРјРµРЅРЅС‹Рµ
    23 00000016 B803000000                      mov     eax, 3 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†Рё 3 (read)
    24 0000001B BB00000000                      mov     ebx, 0 ; stdin = 0
    25 00000020 B9[08000000]                    mov     ecx, InBuf ; Р°РґРµСЂСЃ РІРІРѕРґРёРјРѕР№ РїРµСЂРµРјРµРЅРЅРѕР№
    26 00000025 BA14000000                      mov     edx, lenIn ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
    27 0000002A CD80                            int     80h ; РІС‹Р·С‹РІР°РµРј СЃРёСЃС‚РµРјРЅСѓСЋ С„СѓРЅРєС†РёСЋ
    28                                          ;РџСЂРµРѕР±СЂР°Р·СѓРµРј СЃС‚СЂРѕРєСѓ РІ С‡РёСЃР»Рѕ
    29 0000002C BE[08000000]                    mov esi, InBuf ; Р°РґСЂРµСЃ Р±СѓС„РµСЂР° РІС‹РІРѕР¶Р°
    30 00000031 E8(00000000)                    call StrToInt ; РІС‹Р·С‹РІР°РµРј С„СѓРЅРєС†РёСЋ РёР· Р±РёР±Р»РёРѕС‚РµРєРё
    31                                  
    32 00000036 A3[00000000]                    mov [A], EAX ; СЂРµР·СѓР»СЊС‚Р°С‚ СЃРѕС…СЂР°РЅСЏРј РІ РїРµСЂРµРјРµРЅРЅСѓСЋ A
    33                                  
    34 0000003B B803000000                      mov     eax, 3
    35 00000040 BB00000000                      mov     ebx, 0
    36 00000045 B9[08000000]                    mov     ecx, InBuf
    37 0000004A BA14000000                      mov     edx, lenIn
    38 0000004F CD80                            int     80h
    39                                  
    40 00000051 BE[08000000]                    mov esi, InBuf
    41 00000056 E8(00000000)                    call StrToInt
    42                                  
    43 0000005B A3[02000000]                    mov [B], EAX
    44                                  
    45 00000060 B803000000                      mov     eax, 3
    46 00000065 BB00000000                      mov     ebx, 0
    47 0000006A B9[08000000]                    mov     ecx, InBuf
    48 0000006F BA14000000                      mov     edx, lenIn
    49 00000074 CD80                            int     80h
    50                                  
    51 00000076 BE[08000000]                    mov esi, InBuf
    52 0000007B E8(00000000)                    call StrToInt
    53                                  
    54 00000080 A3[04000000]                    mov [X], EAX
    55                                  
    56 00000085 A1[00000000]                    mov EAX, [A]
    57 0000008A 8B1D[04000000]                  mov EBX, [X]
    58 00000090 F7EB                            imul EBX
    59                                          ;xor EDX, EDX
    60 00000092 B902000000                      mov ECX, 2
    61 00000097 98                              cwde 
    62 00000098 99                              cdq
    63 00000099 F7F9                            idiv ECX
    64                                  
    65 0000009B 83FA00                          cmp EDX, 0
    66 0000009E 7507                            jne else
    67 000000A0 A3[06000000]                    mov [f], EAX
    68 000000A5 EB26                            jmp continue
    69                                      else:
    70 000000A7 A1[00000000]                    mov EAX, [A]
    71 000000AC 8B1D[04000000]                  mov EBX, [X]
    72 000000B2 F7EB                            imul EBX
    73 000000B4 89C1                            mov ECX, EAX
    74 000000B6 A1[02000000]                    mov EAX, [B]
    75 000000BB F7E8                            imul EAX
    76 000000BD 8B1D[02000000]                  mov EBX, [B]
    77 000000C3 F7EB                            imul EBX
    78 000000C5 29C1                            sub ECX, EAX
    79 000000C7 890D[06000000]                  mov [f], ECX
    80                                      continue:
    81 000000CD BE[1C000000]                    mov esi, OutBuf ; Р·Р°РіСЂСѓР·РєР° Р°РґСЂРµСЃР° Р±СѓС„РµСЂР° РІС‹РІРѕРґР°
    82 000000D2 66A1[06000000]                  mov ax, [f] ; СЃРѕС…СЂР°РЅСЏРµРј СЂРµР·СѓР»СЊС‚Р°С‚ РІ ax
    83 000000D8 98                              cwde ; СЂР°СЃС€РёСЂСЏРµРј ax РґРѕ eax
    84 000000D9 E8(55000000)                    call IntToStr ; РїСЂРµРѕР±СЂР°Р·СѓРµРј С‡РёСЃР»Рѕ РІ СЃС‚СЂРѕРєСѓ
    85 000000DE 89C2                             mov edx, eax ; РІ edx РєР»Р°РґРµРј РґР»РёРЅСѓ СЃС‚СЂРѕРєРё
    86 000000E0 B804000000                      mov     eax, 4 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ РІС‹РІРѕРґР°
    87 000000E5 BB01000000                      mov     ebx, 1 ; stdout = 1 
    88 000000EA 89F1                            mov     ecx, esi ; РІ ecx Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    89 000000EC CD80                            int     80h ; РІС‹Р·С‹РІР°РµРј СЃРёСЃС‚РµРјРЅСѓСЋ С„СѓРЅРєС†РёСЋ
    90                                  
    91                                          ; РљРѕРЅРµС† РїСЂРѕРіСЂР°РјРјС‹
    92 000000EE B801000000                      mov eax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (exit)
    93 000000F3 31DB                            xor ebx, ebx; РєРѕРґ РІРѕР·РІСЂР°С‚Р° 0
    94 000000F5 CD80                            int 80h
    95                                  %include "../lib.asm"
    96                              <1>     section _text
    97                              <1> StrToInt:
    98 00000000 57                  <1>          push   edi
    99 00000001 B739                <1>          mov    bh, '9'
   100 00000003 B330                <1>          mov    bl, '0'
   101 00000005 56                  <1>          push   esi     ; сохраняем адрес исходной строки
   102 00000006 803E2D              <1>          cmp    byte[esi], '-'
   103 00000009 7501                <1>          jne   .prod
   104 0000000B 46                  <1>          inc    esi     ; пропускаем знак
   105 0000000C FC                  <1> .prod    cld
   106 0000000D 6631FF              <1>          xor    di, di  ; обнуляем будущее число
   107 00000010 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
   108 00000011 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
   109 00000013 741F                <1>          je     .Return
   110 00000015 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
   111 00000017 722F                <1>          jb     .Error  ; "ниже" – Ошибка
   112 00000019 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
   113 0000001B 772B                <1>          ja     .Error  ; "выше" – Ошибка
   114 0000001D 2C30                <1>          sub    al, 30h ; получаем цифру из символа
   115 0000001F 6698                <1>          cbw            ; расширяем до слова
   116 00000021 6650                <1>          push   ax      ; сохраняем в стеке
   117 00000023 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
   118 00000027 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
   119 0000002A 665F                <1>          pop    di      ; в DI – очередная цифра
   120 0000002C 6601F8              <1>          add    ax, di
   121 0000002F 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
   122 00000032 EBDC                <1>          jmp    .cycle
   123 00000034 5E                  <1> .Return: pop    esi
   124 00000035 BB00000000          <1>          mov    ebx, 0
   125 0000003A 803E2D              <1>          cmp    byte[esi], '-'
   126 0000003D 7503                <1>          jne    .J
   127 0000003F 66F7DF              <1>          neg    di
   128 00000042 6689F8              <1> .J       mov    ax, di
   129 00000045 98                  <1>          cwde
   130 00000046 EB0B                <1>          jmp    .R
   131 00000048 5E                  <1> .Error:  pop    esi
   132 00000049 B800000000          <1>          mov    eax, 0
   133 0000004E BB01000000          <1>          mov    ebx, 1
   134 00000053 5F                  <1> .R       pop    edi
   135 00000054 C3                  <1>          ret
   136                              <1> IntToStr: 
   137 00000055 57                  <1>          push   edi
   138 00000056 53                  <1>          push   ebx
   139 00000057 52                  <1>          push   edx
   140 00000058 51                  <1>          push   ecx
   141 00000059 56                  <1> 		 push   esi
   142 0000005A C60600              <1> 		 mov    byte[esi],0 ; на место знака
   143 0000005D 83F800              <1>          cmp    eax,0
   144 00000060 7D05                <1>          jge    .l1
   145 00000062 F7D8                <1>          neg    eax
   146 00000064 C6062D              <1>          mov    byte[esi],'-'
   147 00000067 C646060A            <1> .l1      mov    byte[esi+6],10
   148 0000006B BF05000000          <1>          mov    edi,5
   149 00000070 66BB0A00            <1>          mov    bx,10
   150 00000074 6699                <1> .again:  cwd           ; расширили слово до двойного
   151 00000076 66F7F3              <1>          div    bx     ; делим результат на 10
   152 00000079 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
   153 0000007C 88143E              <1>          mov    [esi+edi],dl ; пишем символ в строку
   154 0000007F 4F                  <1>          dec    edi    ; переводим указатель на  
   155                              <1>                        ; предыдущую позицию
   156 00000080 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
   157 00000084 75EE                <1>          jne    .again
   158 00000086 B906000000          <1>          mov    ecx, 6
   159 0000008B 29F9                <1>          sub    ecx, edi ; длина результата+знак
   160 0000008D 89C8                <1> 		 mov    eax,ecx
   161 0000008F 40                  <1> 		 inc    eax      ; длина результата+0А
   162 00000090 46                  <1>          inc    esi      ; пропускаем знак
   163 00000091 56                  <1> 		 push   esi
   164 00000092 8D343E              <1>          lea    esi,[esi+edi] ; начало результата
   165 00000095 5F                  <1> 		 pop    edi
   166 00000096 F3A4                <1>          rep movsb
   167 00000098 5E                  <1>          pop    esi  
   168 00000099 59                  <1>          pop    ecx
   169 0000009A 5A                  <1>          pop    edx
   170 0000009B 5B                  <1>          pop    ebx
   171 0000009C 5F                  <1>          pop    edi
   172 0000009D C3                  <1>          ret
